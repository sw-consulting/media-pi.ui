# Copyright (c) 2025 sw.consulting
# Licensed under the MIT License.
# This file is a part of Media Pi frontend application

map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}

upstream cockpit_ws {
  server mediapi-gateway:9090;   # Cockpit (gateway) container
}

upstream mediapi_core {
  server api:8081;               # media-pi.core (API) container
}

# Default server configuration

server {
        listen 8082;
        listen [::]:8082;
        server_name _;
        return 301 https://$host:8083$request_uri;
}

server {
        listen 8083 ssl default_server;
        listen [::]:8083 ssl default_server;

        ssl_certificate /etc/nginx/certificate/s.crt;
        ssl_certificate_key /etc/nginx/certificate/s.key;
        root /var/www;
        index 200.html;
        server_name _;
        error_page 404 404.html;
        location / {
                try_files $uri $uri/ =404;
        }
}

# Virtual Host configuration for media-pi.sw.consulting

server {
        listen 8083 ssl ;
        listen [::]:8083 ssl ;
        ssl_certificate /etc/nginx/certificate/s.crt;
        ssl_certificate_key /etc/nginx/certificate/s.key;
        root /var/www/media-pi;
        index index.html;

        server_name media-pi.sw.consulting;

        location / {
           try_files $uri /index.html =404;
        }
}

# ========== Cockpit vhost with access check ==========
server {
  listen 8083 ssl http2;
  server_name cockpit.media-pi.sw.consulting;

  # TLS (re-use your existing certs in the UI container)
  ssl_certificate     /etc/nginx/certificate/fullchain.pem;
  ssl_certificate_key /etc/nginx/certificate/privkey.pem;
  add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

  # 1) Entry point: https://cockpit.media-pi.sw.consulting/?device=<deviceId>
  location = / {
    # Normalize/require query param
    if ($arg_device = "") { return 400 "missing device query param"; }

    # Subrequest to API to check access; API should respond:
    #  - 200 OK if allowed (optionally set X-Cockpit-Alias header)
    #  - 401/403/404 otherwise
    auth_request /__auth;

    # Grab alias from API header if provided; otherwise default to pi-<deviceId>
    auth_request_set $cockpit_alias $upstream_http_x_cockpit_alias;
    if ($cockpit_alias = "") { set $cockpit_alias "pi-$arg_device"; }

    # Redirect the browser to Cockpit's remote-host URL
    return 302 /@$cockpit_alias/;
  }

  # 2) Internal auth subrequest → your API
  location = /__auth {
    internal;
    proxy_method GET;
    proxy_pass http://mediapi_core/api/cockpit/authorize?deviceId=$arg_device;

    # Forward identity (JWT / cookies) so API can decide
    proxy_set_header Authorization $http_authorization;
    proxy_set_header Cookie        $http_cookie;

    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Original-URI  $scheme://$host$request_uri;

    proxy_intercept_errors on;
    error_page 401 = @auth_login;     # unauthenticated → send to your login page
    error_page 403 = @auth_forbidden; # authenticated, but no access
    error_page 404 = @auth_notfound;  # device not found
  }

  location @auth_login     { return 302 https://mediapi.sw.consulting/login?return=$scheme://$host$request_uri; }
  location @auth_forbidden { return 403; }
  location @auth_notfound  { return 404; }

  # 3) Everything else (including /@<alias>/… ) → Cockpit gateway (WebSocket-friendly)
  location / {
    proxy_pass http://cockpit_ws;

    proxy_set_header Host              $host;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;

    proxy_http_version 1.1;
    proxy_set_header Upgrade           $http_upgrade;
    proxy_set_header Connection        $connection_upgrade;

    proxy_read_timeout  3600s;
    proxy_send_timeout  3600s;
  }
}
